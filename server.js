// server.js
const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const cors = require('cors');
const path = require('path');

const app = express();
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true })); // ‡¶´‡¶∞‡ßç‡¶Æ ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡ßú‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø

app.use(express.static('public')); // client ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠ ‡¶ï‡¶∞‡¶¨‡ßá

const server = http.createServer(app);

// cors options: production-‡¶è specific origin ‡¶≤‡¶ø‡¶ñ‡¶¨‡ßá
const io = new Server(server, {
  cors: { origin: '*' }
});

// ================= Access Code System =================
const ACCESS_CODE = "12345"; // üëâ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶ø‡¶ï‡ßç‡¶∞‡ßá‡¶ü ‡¶ï‡ßã‡¶° ‡¶≤‡¶ø‡¶ñ‡ßã

// ‡¶π‡ßã‡¶Æ‡¶™‡ßá‡¶ú‡ßá ‡¶ï‡ßã‡¶° ‡¶ö‡¶æ‡¶á‡¶¨‡ßá
app.get("/", (req, res) => {
  res.send(`
    <form method="POST" action="/login" style="text-align:center;margin-top:50px;">
      <input type="password" name="code" placeholder="Enter Access Code" required />
      <button type="submit">Enter</button>
    </form>
  `);
});

// ‡¶ï‡ßã‡¶° ‡¶ö‡ßá‡¶ï
app.post("/login", (req, res) => {
  if (req.body.code === ACCESS_CODE) {
    res.sendFile(path.join(__dirname, "index.html")); // ‡¶∏‡¶†‡¶ø‡¶ï ‡¶π‡¶≤‡ßá secure.html ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶¨‡ßá
  } else {
    res.send("<h2 style='color:red;text-align:center;'>‚ùå Wrong Code! Access Denied.</h2>");
  }
});

// ================= Socket.IO Part =================
let lastFull = { list: [], lastUpdated: 0 };

io.on('connection', (socket) => {
  console.log('socket connected:', socket.id);

  socket.on('orders:hello', (data) => {
    try {
      if (lastFull.lastUpdated > (data.lastUpdated || 0)) {
        socket.emit('orders:full', lastFull);
      }
    } catch (e) { console.error(e); }
  });

  socket.on('orders:sync', (payload) => {
    try {
      if (payload.lastUpdated && payload.lastUpdated > lastFull.lastUpdated) {
        lastFull = { list: payload.list || [], lastUpdated: payload.lastUpdated };
      }
      socket.broadcast.emit('orders:sync', payload);
    } catch (e) { console.error(e); }
  });

  socket.on('disconnect', () => {
    console.log('socket disconnected:', socket.id);
  });
});

// ================= Run Server =================
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => console.log(`Server listening on ${PORT}`));
